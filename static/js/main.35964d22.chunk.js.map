{"version":3,"sources":["data/gameStatsNames.js","data/rSource.js","App.js","serviceWorker.js","index.js"],"names":["gameStats","require","module","exports","Object","keys","players","gameStatsNames","playerStlats","stlatNames","values","stat","stlat","x","y","x2","y2","xy","n","length","player","r","Math","sqrt","push","sort","a","b","abs","console","log","JSON","stringify","rSource","React","useState","setStlat","setStat","data","useMemo","label","name","series","type","showPoints","axes","primary","position","stlatOptions","filter","map","value","statOptions","style","width","height","grouping","tooltip","options","onChange","e","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.35964d22.chunk.js","sourcesContent":["const gameStats=require('./gameStats');\nmodule.exports=Object.keys(gameStats[Object.keys(gameStats)[0]])","const fetch = require('node-fetch');\nconst players = require('./players');\nconst gameStats = require('./gameStats');\nconst gameStatsNames=require('./gameStatsNames');\nconst playerStlats=require('./playerStlats');\nconst stlatNames=require('./stlatNames');\nvar values=[];\nfor (const stat of gameStatsNames){\n    for (const stlat of stlatNames){\n        var x=0,y=0,x2=0,y2=0,xy=0;\n        var n=players.length;\n        for(const player of players){\n            x+=playerStlats[player][stlat]\n            y+=gameStats[player][stat]\n            x2+=playerStlats[player][stlat]*playerStlats[player][stlat]\n            y2+=gameStats[player][stat]*gameStats[player][stat]\n            xy+=gameStats[player][stat]*playerStlats[player][stlat]\n        }\n        var r=(n*xy-x*y)/Math.sqrt((n*x2-x*x)*(n*y2-y*y))\n        if(!!r){\n            values.push({\n                stat,\n                stlat,\n                r:r\n            })\n        }\n    }\n}\nvalues.sort((a,b)=>{\n    return Math.abs(b.r)-Math.abs(a.r)\n})\nconsole.log(JSON.stringify(values))\nmodule.exports=values","import React from 'react'\n//\nimport { Chart } from 'react-charts'\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\n\nconst players = require('./data/players');\nconst gameStats = require('./data/gameStats');\nconst gameStatsNames=require('./data/gameStatsNames');\nconst playerStlats=require('./data/playerStlats');\nconst stlatNames=require('./data/stlatNames');\nconst rSource=require('./data/rSource');\nexport default () => {\n  const [stlat, setStlat] = React.useState(\"divinity\");\n  const [stat, setStat] = React.useState(\"HOME_RUN\");\n\n\n  const data = React.useMemo(\n    () => {\n        var data=[];\n        for(var player of players){\n          data.push({\n            data:[[\n              playerStlats[player][stlat],\n              gameStats[player][stat]\n            ]],\n            label: playerStlats[player].name\n          })\n        }\n        return data\n    },\n    [stlat,stat]\n  )\n  const series = React.useMemo(\n    () => ({\n      type: 'bubble',\n      showPoints: false\n    }),\n    []\n  )\n  const axes = React.useMemo(\n    () => [\n      { primary: true, type: 'linear', position: 'bottom' },\n      { type: 'linear', position: 'left' }\n    ],\n    []\n  )\n  const stlatOptions = React.useMemo(\n    () => {\n        return rSource.filter(x => x.stat==stat).map(x => {\n          return {\n            value: x.stlat,\n            label: x.stlat+\" \"+x.r\n          }\n        })\n    },\n    [stat]\n  )\n  const statOptions = React.useMemo(\n    () => {\n        return rSource.filter(x => x.stlat==stlat).map(x => {\n          return {\n            value: x.stat,\n            label: x.stat+\" \"+x.r\n          }\n        })\n    },\n    [stlat]\n  )\n  return (\n    <div>\n      <div\n        style={{\n          width: '800px',\n          height: '600px'\n        }}\n      >\n          <Chart\n            data={data}\n            series={series}\n            axes={axes}\n            grouping=\"single\"\n            tooltip\n          />\n      </div>\n      <div\n        style={{\n          width: '400px'\n        }}\n      >\n        <Dropdown \n          options={stlatOptions} \n          onChange={(e)=> {\n            setStlat(e.value)\n          }}\n          value={stlat} \n        />\n      </div>\n      <div\n        style={{\n          width: '400px'\n        }}\n      >\n        <Dropdown \n          options={statOptions} \n          onChange={(e)=> {\n            setStat(e.value)\n          }} \n          value={stat}\n        />\n      </div>\n    </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}